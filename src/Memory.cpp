#include "Memory.h"
#include <stdexcept>

Memory::Memory() {
    memory.fill(0);
    uint8_t fontdata[16][5] = {
                {0xF0, 0x90, 0x90, 0x90, 0xF0}, // 0
                {0x20, 0x60, 0x20, 0x20, 0x70}, // 1
                {0xF0, 0x10, 0xF0, 0x80, 0xF0}, // 2
                {0xF0, 0x10, 0xF0, 0x10, 0xF0}, // 3
                {0x90, 0x90, 0xF0, 0x10, 0x10}, // 4
                {0xF0, 0x80, 0xF0, 0x10, 0xF0}, // 5
                {0xF0, 0x80, 0xF0, 0x90, 0xF0}, // 6
                {0xF0, 0x10, 0x20, 0x40, 0x40}, // 7
                {0xF0, 0x90, 0xF0, 0x90, 0xF0}, // 8
                {0xF0, 0x90, 0xF0, 0x10, 0xF0}, // 9
                {0xF0, 0x90, 0xF0, 0x90, 0x90}, // A
                {0xE0, 0x90, 0xE0, 0x90, 0xE0}, // B
                {0xF0, 0x80, 0x80, 0x80, 0xF0}, // C
                {0xE0, 0x90, 0x90, 0x90, 0xE0}, // D
                {0xF0, 0x80, 0xF0, 0x80, 0xF0}, // E
                {0xF0, 0x80, 0xF0, 0x80, 0x80}  // F
            };
    memcpy(memory.data() + 80, fontdata, 80);
}

uint8_t Memory::read(size_t address) const {
    if (address >= memory.size()) {
        throw std::out_of_range("Memory read out of bounds");
    }
    return memory[address];
}

void Memory::write(size_t address, uint8_t value) {
    if (address >= memory.size()) {
        throw std::out_of_range("Memory write out of bounds");
    }
    memory[address] = value;
}